buildscript {
    ext {
        lombokVersion = '1.18.36'
        log4jVersion = '2.23.1'
    }
}

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    //id("io.freefair.aspectj.post-compile-weaving") version "4.1.4" //compile 1.8
    //id("io.freefair.aspectj.post-compile-weaving") version "8.11" //fail 1.8
}
//compileJava.options.fork = true
//compileJava.options.forkOptions.executable = '/path_to_javac'
repositories {
    mavenCentral()
    gradlePluginPortal()
    google()
}

dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter:5.7.2"

    // This dependency is used by the application.
    implementation "com.google.guava:guava:30.1.1-jre"

    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api
    implementation "org.apache.logging.log4j:log4j-api:2.23.1"

    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
    implementation "org.apache.logging.log4j:log4j-core:2.23.1"

    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-slf4j-impl
    implementation "org.apache.logging.log4j:log4j-slf4j2-impl:2.23.1"

    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    implementation 'org.slf4j:slf4j-api:2.0.16'

    // https://projectlombok.org
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

}

application {
    mainClass = "mil.teng24c.aspectj.gradle.App"
}

jar {
    manifest {
        attributes(
                "Main-Class": application.mainClass
        )
        baseName '24C-AspectJ'
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

tasks.register("helloTask") {
    println 'gradle! Hello'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform();
    classpath += files('config')
    println 'gradle! task-test'
}

tasks.named('run') {
    classpath += files('config')

    it.doFirst {
        println 'gradle! doFirst'
        systemProperty 'java.io.tmpdir', 'tmpFolder'
        def x123=System.getProperty("var123")
        systemProperty 'var123',x123+"-data"
        println('gradle! var123='+System.getProperty("var123"));
    }
    println 'gradle! task-run, configure'
}



// use if compiler>=9
//tasks.withType(JavaCompile) {
//    options.release = 8
//}

